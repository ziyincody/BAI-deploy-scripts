#!/usr/bin/env bash

#  Copyright (C) 2019-2021 Maker Ecosystem Growth Holdings, INC.

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

echo "$BIN_DIR/contracts/$lib/out"
echo "$ETH_NONCE"

. "$LIB_DIR/common.sh"

loadAddresses
WETH=$(jq -r ".import.weth | values" "$CONFIG_FILE")

# Deploy Multicall
echo "Deploy Multicall"
if [[ -z "$MULTICALL" ]]; then
    MULTICALL=$(dappCreate multicall Multicall)
    copy multicall
fi

# Deploy the oracle module and medianizer contract
tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    pipAddr=$(jq -r ".tokens.${token} | .import.pip | values" "$CONFIG_FILE")
    if [[ "$pipAddr" == "" ]]; then
        type=$(jq -r ".tokens.${token} | .pipDeploy | .type | values" "$CONFIG_FILE")
        # Deploy Medianizer as Feed
        if [[ "$type" == "median" ]]; then
            contract=$(dappCreate testchain-medians "Median${token}USD")
            eval "export VAL_${token}=${contract}"
            logAddr "VAL_${token}" "$(eval "echo ${contract}")"
            signers=$(jq -r ".tokens.${token} | .pipDeploy | .signers | .[]" "$CONFIG_FILE")
            # Approve oracle price feed providers
            allsigners=()
            for signer in $signers; do
                allsigners+=("${signer}")
            done
            sethSend "$(eval echo "\$VAL_${token}")" 'lift(address[] memory)' "[$(join "${allsigners[@]}")]"
            # Set quorum for Medianizer
            sethSend "$(eval echo "\$VAL_${token}")" 'setBar(uint256)' "$(seth --to-uint256 3)"
        fi
        # Deploy DSValue as Feed
        if [[ "${type}" == "value" ]]; then
            contract=$(dappCreate ds-value DSValue)
            eval "export VAL_${token}=${contract}"
        fi
    else
        eval "export VAL_${token}=${pipAddr}"
        copy osm
        #copy testchain-medians
        logAddr "VAL_${token}" "$pipAddr"
    fi
    eval "export PIP_${token}=\$VAL_${token}"
done


# Deploy ProxyRegistry
echo "Deploy ProxyResigry"
if [[ -z "$PROXY_REGISTRY" ]]; then
    PROXY_FACTORY=$(dappCreate ds-proxy DSProxyFactory)
    PROXY_REGISTRY=$(dappCreate geb-proxy-registry GebProxyRegistry "$PROXY_FACTORY")
else
    PROXY_FACTORY=$(seth storage "$PROXY_REGISTRY" 1)
    PROXY_FACTORY=0x${PROXY_FACTORY:26:66}
    copy ds-proxy
    copy geb-proxy-registry
fi


# Get a proxy for the deployer address (create if didn't previously exist)
echo "Build Proxy Deployer"
PROXY_DEPLOYER=$(seth call "$PROXY_REGISTRY" 'proxies(address)(address)' "$ETH_FROM")
if [[ "$PROXY_DEPLOYER" == "0x0000000000000000000000000000000000000000" ]]; then
    sethSend "$PROXY_REGISTRY" 'build()'
    PROXY_DEPLOYER="$(seth call "$PROXY_REGISTRY" 'proxies(address)(address)' "$ETH_FROM")"
fi


# create multisig
echo "Deploy Multisig"
if [[ -z "$GEB_MULTISIG" ]]; then
    GEB_MULTISIG="$(dappCreate geb-basic-multisig MultiSigWallet "[$ETH_FROM]" "1")"
else
    export GEB_MULTISIG
fi

#GEB_MULTISIG_PROXY="$(sethSend "$PROXY_REGISTRY" "build(address)" "$GEB_MULTISIG")"


# ================== Peripherials ===========================

# deploy TokenBurner
echo "Deploy Proxy Actions"
if [[ -z "$PROXY_PAUSE_ACTIONS" ]]; then
    GEB_PAUSE_AUTHORITY="$(dappCreate ds-roles DSRoles)"
    GEB_ESM_TOKEN_BURNER="$(dappCreate geb-pit TokenBurner)"

    GEB_POLLING_EMITTER="$(dappCreate geb-polling-emitter GebPollingEmitter)"
    GEB_GOV_ACTIONS="$(dappCreate h20-deploy GovActions)"
    GEB_ESM_TOKEN_BURNER="$(dappCreate geb-pit TokenBurner)"

    PROXY_ACTIONS="$(dappCreate geb-proxy-actions GebProxyActions)"
    PROXY_ACTIONS_INCENTIVES="$(dappCreate geb-proxy-actions GebProxyIncentivesActions)"
    PROXY_ACTIONS_GLOBAL_SETTLEMENT="$(dappCreate geb-proxy-actions GebProxyActionsGlobalSettlement)"
    PROXY_DEBT_AUCTION_ACTIONS="$(dappCreate geb-proxy-actions GebProxyDebtAuctionActions)"
    PROXY_SURPLUS_AUCTION_ACTIONS="$(dappCreate geb-proxy-actions GebProxySurplusAuctionActions)"
    PROXY_SAVIOUR_ACTIONS="$(dappCreate geb-proxy-actions GebProxySaviourActions)"
    PROXY_PAUSE_SCHEDULE_ACTIONS="$(dappCreate geb-pause-schedule-proxy-actions GebPauseScheduleProxyActions)"
    PROXY_PAUSE_ACTIONS="$(dappCreate geb-deploy-pause-proxy-actions GebDeployPauseProxyActions)"
fi

# Deploy Fabs
echo "Deploy Fabs"
if [[ -z "$FSM_GOV_INTERFACE" ]]; then
    "$LIBEXEC_DIR/H2O-core/deploy-fab"
    # shellcheck source=/dev/null
    . "$OUT_DIR/load-fabs-addr-temp"
fi


echo "Deploy Protocol token"
if [[ -z "$GEB_PROT" ]]; then
    # It means the GOV token will be created now in the next deployment script call, then we can send funds to the Faucet and set permissions to FLOP
    newGovToken=true
    GEB_PROT="$(dappCreate ds-token DSToken '"BGT"' '"BGT"')"
    # Mint Gov Token, send to the Faucet and set permissions if a new token
    sethSend "$GEB_PROT" 'mint(address,uint256)' "$ETH_FROM" "$(seth --to-uint256 "$(seth --to-wei 1000000 ETH)")"
    # sethSend "$FAUCET" 'gulp(address)' "$MCD_GOV"

    # # Use custom authority for the new GOV token
    # GOV_GUARD=$(dappCreate mkr-authority MkrAuthority)

    # # Set GOV_GUARD as authority of MCD_GOV
    # sethSend "$GEB_GOV" 'setAuthority(address)' "$GOV_GUARD"

    # # Set ownership to MCD_PAUSE_PROXY
    # sethSend "$GEB_GOV" 'setOwner(address)' "$MCD_PAUSE_PROXY"

    # # Allow Flop to mint Gov token
    # sethSend "$GOV_GUARD" 'rely(address)' "$MCD_FLOP"

    # # Set root to MCD_PAUSE_PROXY
    # sethSend "$GOV_GUARD" 'setRoot(address)' "$MCD_PAUSE_PROXY"
# else
#     newGovToken=false
#     export GEB_PROT
#     sethSend "$GEB_PROT" 'mint(uint256)' "100000000000000000000"
fi


# ================== Core ===========================

echo "Deploy Core"
if [[ -z "$FSM_GOV_INTERFACE" ]]; then

    GEB_DEPLOY=$(dappCreate h20-deploy GebDeploy)

    GEB_PAUSE_AUTHORITY="$(dappCreate ds-roles DSRoles)"
    sethSend "$GEB_PAUSE_AUTHORITY" 'setRootUser(address, bool)' "$GEB_DEPLOY" true

    sethSend "$GEB_DEPLOY" "setFirstFactoryBatch(address,address,address,address,address,address,address)" "$SAFEENGINE_FAB" "$TAXCOLLECTOR_FAB" "$ACCOUNTINGENGINE_FAB" "$LIQUIDATIONENGINE_FAB" "$COIN_FAB" "$COINJOIN_FAB" "$COINSAVINGSACCOUNT_FAB"
    sethSend "$GEB_DEPLOY" "setSecondFactoryBatch(address,address,address,address,address,address,address,address,address)" "$RECYCLINGSURPLUSAUCTIONHOUSE_FAB" "$BURNINGSURPLUSAUCTIONHOUSE_FAB" "$DEBTAUCTIONHOUSE_FAB" "$ENGLISHCOLLATERALAUCTIONHOUSE_FAB" "$INCREASINGDISCOUNTCOLLATERALAUCTIONHOUSE_FAB" "$FIXED_DISCOUNT_COLLATERAL_AUCTION_HOUSE_FAB" "$ORACLERELAYER_FAB" "$GLOBALSETTLEMENT_FAB" "$ESM_FAB"
    sethSend "$GEB_DEPLOY" "setThirdFactoryBatch(address,address,address)" "$PAUSE_FAB" "$PROTESTPAUSE_FAB" "$STABILITYFEETREASURY_FAB"

    sethSend "$GEB_DEPLOY" 'deploySAFEEngine()'
    sethSend "$GEB_DEPLOY" 'deployCoin(string, string, uint256)' '"BAI Index"' '"BAI"' "4" 
    sethSend "$GEB_DEPLOY" 'deployTaxation()'
    sethSend "$GEB_DEPLOY" 'deployAuctions(address, address, bytes32)' "$GEB_PROT" "$ETH_FROM" "$(seth --to-bytes32 "$(seth --from-ascii "recycling")")"
    sethSend "$GEB_DEPLOY" 'deployAccountingEngine()'
    sethSend "$GEB_DEPLOY" 'deployStabilityFeeTreasury()'
    sethSend "$GEB_DEPLOY" 'deployLiquidator()'
    sethSend "$GEB_DEPLOY" 'deployShutdown(address, address, address, uint256)' "$GEB_PROT" "0x0000000000000000000000000000000000000000" "0x0000000000000000000000000000000000000000" "10"

    sethSend "$GEB_DEPLOY" 'deployPause(uint256, address)' "0" "$GEB_PAUSE_AUTHORITY"

    eval "export VAL_DEPLOY=${contract}"


    GEB_SAFE_ENGINE="$(seth call "$GEB_DEPLOY" "safeEngine()(address)")"
    GEB_TAX_COLLECTOR="$(seth call "$GEB_DEPLOY" "taxCollector()(address)")"
    GEB_ACCOUNTING_ENGINE="$(seth call "$GEB_DEPLOY" "accountingEngine()(address)")"
    GEB_LIQUIDATION_ENGINE="$(seth call "$GEB_DEPLOY" "liquidationEngine()(address)")"
    GEB_STABILITY_FEE_TREASURY="$(seth call "$GEB_DEPLOY" "stabilityFeeTreasury()(address)")"
    GEB_COIN="$(seth call "$GEB_DEPLOY" "coin()(address)")"
    GEB_COIN_JOIN="$(seth call "$GEB_DEPLOY" "coinJoin()(address)")"
    GEB_RECYCLING_SURPLUS_AUCTION_HOUSE="$(seth call "$GEB_DEPLOY" "recyclingSurplusAuctionHouse()(address)")"
    GEB_BURNING_SURPLUS_AUCTION_HOUSE="$(seth call "$GEB_DEPLOY" "burningSurplusAuctionHouse()(address)")"
    GEB_DEBT_AUCTION_HOUSE="$(seth call "$GEB_DEPLOY" "debtAuctionHouse()(address)")"
    GEB_ORACLE_RELAYER="$(seth call "$GEB_DEPLOY" "oracleRelayer()(address)")"
    GEB_COIN_SAVINGS_ACCOUNT="$(seth call "$GEB_DEPLOY" "coinSavingsAccount()(address)")"
    GEB_GLOBAL_SETTLEMENT="$(seth call "$GEB_DEPLOY" "globalSettlement()(address)")"
    GEB_ESM="$(seth call "$GEB_DEPLOY" "esm()(address)")"
    GEB_PAUSE="$(seth call "$GEB_DEPLOY" "pause()(address)")"
    GEB_PROTEST_PAUSE="$(seth call "$GEB_DEPLOY" "protestPause()(address)")"

    FSM_GOV_INTERFACE="$(dappCreate geb-fsm-governance-interface FsmGovernanceInterface)"


    sethSend "$GEB_PAUSE_AUTHORITY" 'setRootUser(address, bool)' "$GEB_MULTISIG" true
    sethSend "$GEB_DEPLOY" 'giveControl(address)' "$GEB_PAUSE"
    sethSend "$GEB_DEPLOY" 'giveControl(address)' "$ETH_FROM"

    cat > "$OUT_DIR/load-core-addr-temp" <<EOF
#!/bin/bash
export GEB_PROT=$GEB_PROT
export GEB_SAFE_ENGINE=$GEB_SAFE_ENGINE
export GEB_TAX_COLLECTOR=$GEB_TAX_COLLECTOR
export GEB_ACCOUNTING_ENGINE=$GEB_ACCOUNTING_ENGINE
export GEB_LIQUIDATION_ENGINE=$GEB_LIQUIDATION_ENGINE
export GEB_STABILITY_FEE_TREASURY=$GEB_STABILITY_FEE_TREASURY
export GEB_COIN=$GEB_COIN
export GEB_COIN_JOIN=$GEB_COIN_JOIN
export GEB_RECYCLING_SURPLUS_AUCTION_HOUSE=$GEB_RECYCLING_SURPLUS_AUCTION_HOUSE
export GEB_BURNING_SURPLUS_AUCTION_HOUSE=$GEB_BURNING_SURPLUS_AUCTION_HOUSE
export GEB_DEBT_AUCTION_HOUSE=$GEB_DEBT_AUCTION_HOUSE
export GEB_ORACLE_RELAYER=$GEB_ORACLE_RELAYER
export GEB_COIN_SAVINGS_ACCOUNT=$GEB_COIN_SAVINGS_ACCOUNT
export GEB_GLOBAL_SETTLEMENT=$GEB_GLOBAL_SETTLEMENT
export GEB_ESM=$GEB_ESM
export GEB_PAUSE=$GEB_PAUSE
export GEB_PROTEST_PAUSE=$GEB_PROTEST_PAUSE
export GEB_GOV_ACTIONS=$GEB_GOV_ACTIONS
export PROXY_DEPLOYER=$PROXY_DEPLOYER
export FSM_GOV_INTERFACE=$FSM_GOV_INTERFACE
EOF
fi



# ================== Peripherials ===========================

echo "Deploy other systems"
if [[ -z $GEB_REDEMPTION_PRICE_SNAP ]]; then
    sethSend "$GEB_DEPLOY" 'giveControl(address)' "$PROXY_DEPLOYER"

    GEB_SAFE_MANAGER="$(dappCreate geb-safe-manager GebSafeManager "$GEB_SAFE_ENGINE")"
    GET_SAFES="$(dappCreate geb-safe-manager GetSafes)"

    sethSend "$FSM_GOV_INTERFACE" 'setOwner(address)' "$PROXY_DEPLOYER"

    "$LIBEXEC_DIR"/H2O-core/deploy-coin-oracle
    "$LIBEXEC_DIR"/H2O-core/deploy-rate-setter
    "$LIBEXEC_DIR"/H2O-core/deploy-ceiling-setter
    "$LIBEXEC_DIR"/H2O-core/deploy-auction-throttler
    "$LIBEXEC_DIR"/H2O-core/deploy-keeper-flash-proxy
    "$LIBEXEC_DIR"/H2O-core/deploy-proto-auth

    # saveCooldown
    SAFE_SAVIOUR_REGISTRY="$(dappCreate geb-safe-saviours SAFESaviourRegistry "3600")"

    GEB_REDEMPTION_PRICE_SNAP=$(dappCreate geb-redemption-price-snap RedemptionPriceSnap "$GEB_ORACLE_RELAYER")
fi

# Generate addresses.json file
# shellcheck disable=SC2153
cat > "$OUT_DIR"/addresses.json <<EOF
{
    "GEB_PROT": "$(seth --to-checksum-address "$GEB_PROT")",
    "ETH": "$(seth --to-checksum-address "$WETH")",
    "GEB_SAFE_ENGINE": "$(seth --to-checksum-address "$GEB_SAFE_ENGINE")",
    "GEB_TAX_COLLECTOR": "$(seth --to-checksum-address "$GEB_TAX_COLLECTOR")",
    "GEB_ACCOUNTING_ENGINE": "$(seth --to-checksum-address "$GEB_ACCOUNTING_ENGINE")",
    "GEB_LIQUIDATION_ENGINE": "$(seth --to-checksum-address "$GEB_LIQUIDATION_ENGINE")",
    "GEB_STABILITY_FEE_TREASURY": "$(seth --to-checksum-address "$GEB_STABILITY_FEE_TREASURY")",
    "GEB_COIN": "$(seth --to-checksum-address "$GEB_COIN")",
    "GEB_COIN_JOIN": "$(seth --to-checksum-address "$GEB_COIN_JOIN")",
    "GEB_DEBT_AUCTION_HOUSE": "$(seth --to-checksum-address "$GEB_DEBT_AUCTION_HOUSE")",
    "GEB_ORACLE_RELAYER": "$(seth --to-checksum-address "$GEB_ORACLE_RELAYER")",
    "GEB_GLOBAL_SETTLEMENT": "$(seth --to-checksum-address "$GEB_GLOBAL_SETTLEMENT")",
    "GEB_ESM": "$(seth --to-checksum-address "$GEB_ESM")",
    "GEB_PAUSE": "$(seth --to-checksum-address "$GEB_PAUSE")",
    "PROXY_REGISTRY": "$(seth --to-checksum-address "$PROXY_REGISTRY")",
    "PROXY_FACTORY": "$(seth --to-checksum-address "$PROXY_FACTORY")",
    "PROXY_DEPLOYER": "$(seth --to-checksum-address "$PROXY_DEPLOYER")",
    "MULTICALL": "$(seth --to-checksum-address "$MULTICALL")",
    "GEB_DEPLOY": "$(seth --to-checksum-address "$GEB_DEPLOY")",
    "GEB_MULTISIG": "$(seth --to-checksum-address "$GEB_MULTISIG")",
    "GEB_POLLING_EMITTER": "$(seth --to-checksum-address "$GEB_POLLING_EMITTER")",
    "GEB_GOV_ACTIONS": "$(seth --to-checksum-address "$GEB_GOV_ACTIONS")",
    "GEB_ESM_TOKEN_BURNER": "$(seth --to-checksum-address "$GEB_ESM_TOKEN_BURNER")",
    "PROXY_ACTIONS": "$(seth --to-checksum-address "$PROXY_ACTIONS")",
    "PROXY_ACTIONS_INCENTIVES": "$(seth --to-checksum-address "$PROXY_ACTIONS_INCENTIVES")",
    "PROXY_ACTIONS_GLOBAL_SETTLEMENT": "$(seth --to-checksum-address "$PROXY_ACTIONS_GLOBAL_SETTLEMENT")",
    "PROXY_DEBT_AUCTION_ACTIONS": "$(seth --to-checksum-address "$PROXY_DEBT_AUCTION_ACTIONS")",
    "PROXY_SURPLUS_AUCTION_ACTIONS": "$(seth --to-checksum-address "$PROXY_SURPLUS_AUCTION_ACTIONS")",
    "PROXY_SAVIOUR_ACTIONS": "$(seth --to-checksum-address "$PROXY_SAVIOUR_ACTIONS")",
    "SAFE_MANAGER": "$(seth --to-checksum-address "$GEB_SAFE_MANAGER")",
    "GET_SAFES": "$(seth --to-checksum-address "$GET_SAFES")",
    "PROXY_PAUSE_SCHEDULE_ACTIONS": "$(seth --to-checksum-address "$PROXY_PAUSE_SCHEDULE_ACTIONS")",
    "PROXY_PAUSE_ACTIONS": "$(seth --to-checksum-address "$PROXY_PAUSE_ACTIONS")",
    "FSM_GOV_INTERFACE": "$(seth --to-checksum-address "$FSM_GOV_INTERFACE")",
    "SAFE_SAVIOUR_REGISTRY": "$(seth --to-checksum-address "$SAFE_SAVIOUR_REGISTRY")",
    "GEB_PROTEST_PAUSE": "$(seth --to-checksum-address "$GEB_PROTEST_PAUSE")",
    "GEB_COIN_SAVINGS_ACCOUNT": "$(seth --to-checksum-address "$GEB_COIN_SAVINGS_ACCOUNT")",
    "GEB_BURNING_SURPLUS_AUCTION_HOUSE": "$(seth --to-checksum-address "$GEB_BURNING_SURPLUS_AUCTION_HOUSE")",
    "GEB_RECYCLING_SURPLUS_AUCTION_HOUSE": "$(seth --to-checksum-address "$GEB_RECYCLING_SURPLUS_AUCTION_HOUSE")",
    "GEB_REDEMPTION_PRICE_SNAP": "$(seth --to-checksum-address "$GEB_REDEMPTION_PRICE_SNAP")"
}
EOF

# ================== Core ===========================

echo "Deploy other core"
"$LIBEXEC_DIR"/setters/set-oracle-relayer-params

"$LIBEXEC_DIR"/setters/set-safe-engine-params

"$LIBEXEC_DIR"/setters/set-accounting-engine-params

"$LIBEXEC_DIR"/H2O-core/deploy-collaterals

"$LIBEXEC_DIR"/setters/set-collateral-auction-params

"$LIBEXEC_DIR"/setters/set-collateral-tax-collector-params

"$LIBEXEC_DIR"/setters/set-collateral-safe-engine-params

"$LIBEXEC_DIR"/setters/set-collateral-liquidation-engine-params

"$LIBEXEC_DIR"/setters/set-collateral-oracle-relayer-params

"$LIBEXEC_DIR"/H2O-core/deploy-staking

sethSend "$GEB_DEPLOY" 'takeControl(address)' "$ETH_FROM"



########### POST DEPLOYMENT ACTIONS

# Collateral OSM delay interval
# CALLDATA_OUTPUT=$(seth calldata  "changeDelay(address, uint16)" FSM_ADDRESS 1)
# ETH_GAS=5000000 seth send $PROXY_DEPLOYER "execute(address,bytes)" 0x65dfbbb756c1fa643c1dd6706ad9667e59bfa776 \
#    $CALLDATA_OUTPUT

# Rate setter update delay
# seth send $GEB_RRFM_SETTER "modifyParameters(bytes32,uint256)"   "$(seth --to-bytes32 $(seth --from-ascii  'updateRateDelay'))" 1
# seth send $GEB_RRFM_CALCULATOR "modifyParameters(bytes32,uint256)"   "$(seth --to-bytes32 $(seth --from-ascii ps))" 60

# To set lastReadRedemptionPrice on FixedDiscount Collateral House (only after first auction is created):
# Unless this is set, auction keeper won't be able to bid on auction
# seth send <COLLATERAL_AUCTION_HOUSE> "getCollateralBought(uint256,uint256)" 1 1000000000000000000000

# Create AQA / MATIC pool for staking rewards

# Update last read redemption price in collateral auction house
# seth send 0xe77692873473102047f108CEFdF2A62432f781ff "getCollateralBought(uint256,uint256)" 1 10000000000000000000000000000

# Ensure OCEAN/H2O uni V2 pool was created