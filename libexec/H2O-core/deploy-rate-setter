#!/usr/bin/env bash

#  Copyright (C) 2019-2021 Maker Ecosystem Growth Holdings, INC.

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

# shellcheck source=lib/common.sh
. "$LIB_DIR/common.sh"

. "$OUT_DIR/load-core-addr-temp"
. "$OUT_DIR/load-coin-oracle-addr-temp"

calculator_Kp=$(readValue ".redemption_rate_calculator.Kp | values" "$CONFIG_FILE")
calculator_period_size=$(readValue ".redemption_rate_calculator.ps | values" "$CONFIG_FILE")
calculator_noise_barrier=$(readValue ".redemption_rate_calculator.nb | values" "$CONFIG_FILE")
calculator_feedback_output_upper_bound=$(readValue ".redemption_rate_calculator.foub | values" "$CONFIG_FILE")
calculator_feedback_output_lower_bound="$(readValue ".redemption_rate_calculator.folb | values" "$CONFIG_FILE" "int256")"

setter_base_caller_reward=$(readValue ".redemption_rate_setter.base_caller_reward | values" "$CONFIG_FILE")
setter_max_caller_reward=$(readValue ".redemption_rate_setter.max_caller_reward | values" "$CONFIG_FILE")
setter_reward_increase=$(readValue ".redemption_rate_setter.reward_increase | values" "$CONFIG_FILE")
setter_reward_increase_timeline=$(readValue ".redemption_rate_setter.reward_increase_timeline | values" "$CONFIG_FILE")
setter_max_reward_increase_delay=$(readValue ".redemption_rate_setter.max_reward_increase_delay | values" "$CONFIG_FILE")
setter_update_rate_delay=$(readValue ".redemption_rate_setter.update_rate_delay | values" "$CONFIG_FILE")


## Kp, periodSize, noiseBarrier, feedbackOutputUpperBound, feedbackOutputLowerBound(-(10^27-1))
GEB_RRFM_CALCULATOR="$(dappCreate geb-rrfm-calculators PRawPerSecondCalculator "$calculator_Kp" "$calculator_period_size" "$calculator_noise_barrier" "$calculator_feedback_output_upper_bound" "$calculator_feedback_output_lower_bound")"
## address oracleRelayer_, address treasury_, uint256 baseUpdateCallerReward_, uint256 maxUpdateCallerReward_, uint256 perSecondCallerRewardIncrease_, uint256 relayDelay_
setter_relayer_full_path=$(jq -r '.contracts|keys|.[]|select(.|endswith("SetterRelayer.sol:SetterRelayer"))' "$DAPP_LIB/geb-rrfm-rate-setter/out/dapp.sol.json")
GEB_RRFM_SETTER_RELAYER="$(dappCreate geb-rrfm-rate-setter "$setter_relayer_full_path" "$GEB_ORACLE_RELAYER" "$GEB_STABILITY_FEE_TREASURY" "$setter_base_caller_reward" "$setter_max_caller_reward" "$setter_reward_increase" "$setter_reward_increase_timeline")"
## address oracleRelayer_, address setterRelayer_, address orcl_, address pidCalculator_, uint256 updateRateDelay_
GEB_RRFM_SETTER="$(dappCreate geb-rrfm-rate-setter PIRateSetter "$GEB_ORACLE_RELAYER" "$GEB_RRFM_SETTER_RELAYER" "$GEB_COIN_DSM" "$GEB_RRFM_CALCULATOR" "$setter_update_rate_delay")"

# Set up authorization
sethSend $GEB_RRFM_CALCULATOR "modifyParameters(bytes32,address)" "$(seth --to-bytes32 $(seth --from-ascii 'seedProposer'))" "$GEB_RRFM_SETTER"
sethSend $GEB_RRFM_SETTER_RELAYER "modifyParameters(bytes32,address)" "$(seth --to-bytes32 $(seth --from-ascii 'setter'))" "$GEB_RRFM_SETTER"
sethSend $GEB_ORACLE_RELAYER "addAuthorization(address)" "$GEB_RRFM_SETTER_RELAYER"
# relayer.modifyParameters("maxRewardIncreaseDelay", 10800);



cat > "$OUT_DIR/load-rate-setter-addr-temp" <<EOF
#!/bin/bash
export GEB_RRFM_CALCULATOR=$GEB_RRFM_CALCULATOR
export GEB_RRFM_SETTER_RELAYER=$GEB_RRFM_SETTER_RELAYER
export GEB_RRFM_SETTER=$GEB_RRFM_SETTER
EOF
